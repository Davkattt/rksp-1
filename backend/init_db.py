# backend/init_db.py
"""
Database initialization script
Run this to create tables and add sample data
"""
import asyncio
from sqlalchemy.ext.asyncio import create_async_engine
from app.models import Base, Course, User
from app.auth import get_password_hash
from app.database import AsyncSessionLocal, engine, create_all_tables
import os
from dotenv import load_dotenv

load_dotenv()

async def init_database():
    """Initialize database with tables and sample data"""
    print("üîÑ Initializing database...")
    
    try:
        # Create all tables
        await create_all_tables()
        print("‚úÖ Database tables created successfully")
        
        # Add sample data
        async with AsyncSessionLocal() as session:
            try:
                # Check if courses already exist
                from sqlalchemy import select
                existing_courses = await session.execute(select(Course))
                if existing_courses.scalars().first():
                    print("üìö Courses already exist, skipping course creation")
                else:
                    # Add sample courses
                    courses = [
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                            description="–ù–∞—É—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã —Å –Ω—É–ª—è! –ò–∑—É—á–∏—Ç–µ HTML, CSS, JavaScript –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏. –ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã.",
                            price=5000.0,
                            instructor="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                            duration="8 –Ω–µ–¥–µ–ª—å",
                            level="–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                            image_url="/images/web-dev.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –¥–∏–∑–∞–π–Ω—É",
                            description="–û—Å–≤–æ–π—Ç–µ –æ—Å–Ω–æ–≤—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ UX/UI. –ù–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Figma, Adobe Creative Suite –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.",
                            price=4500.0,
                            instructor="–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                            duration="6 –Ω–µ–¥–µ–ª—å",
                            level="–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                            image_url="/images/design.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python",
                            description="–°—Ç–∞–Ω—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ Python! –û—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫. –ò–∑—É—á–∏—Ç–µ Django, Flask, —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ API.",
                            price=6000.0,
                            instructor="–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤",
                            duration="12 –Ω–µ–¥–µ–ª—å",
                            level="–°—Ä–µ–¥–Ω–∏–π",
                            image_url="/images/python.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ Data Science",
                            description="–ò–∑—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –û—Å–≤–æ–π—Ç–µ Python, SQL, pandas, scikit-learn –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.",
                            price=8000.0,
                            instructor="–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
                            duration="16 –Ω–µ–¥–µ–ª—å",
                            level="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                            image_url="/images/data-science.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                            description="–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iOS –∏ Android —Å React Native. –ò–∑—É—á–∏—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                            price=7000.0,
                            instructor="–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
                            duration="10 –Ω–µ–¥–µ–ª—å",
                            level="–°—Ä–µ–¥–Ω–∏–π",
                            image_url="/images/mobile.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É",
                            description="–û—Å–≤–æ–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥: SMM, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Ä–µ–∫–ª–∞–º—É, email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –ù–∞—É—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.",
                            price=4000.0,
                            instructor="–ê–Ω–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
                            duration="8 –Ω–µ–¥–µ–ª—å",
                            level="–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                            image_url="/images/marketing.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ DevOps",
                            description="–ò–∑—É—á–∏—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ DevOps: Docker, Kubernetes, CI/CD, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é. –ù–∞—É—á–∏—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                            price=9000.0,
                            instructor="–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤",
                            duration="14 –Ω–µ–¥–µ–ª—å",
                            level="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                            image_url="/images/devops.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                            description="–û—Å–≤–æ–π—Ç–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –∑–∞—â–∏—Ç–∞ –æ—Ç —É–≥—Ä–æ–∑, —ç—Ç–∏—á–Ω—ã–π —Ö–∞–∫–∏–Ω–≥, –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã.",
                            price=7500.0,
                            instructor="–ò–≥–æ—Ä—å –ë–µ–ª–æ–≤",
                            duration="12 –Ω–µ–¥–µ–ª—å",
                            level="–°—Ä–µ–¥–Ω–∏–π",
                            image_url="/images/security.jpg"
                        )
                    ]
                    
                    for course in courses:
                        session.add(course)
                    
                    print(f"üìö Created {len(courses)} sample courses")
                
                # Check if users already exist
                existing_users = await session.execute(select(User))
                if existing_users.scalars().first():
                    print("üë• Users already exist, skipping user creation")
                else:
                    # Add sample users
                    admin_user = User(
                        name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                        email="admin@coursestore.ru",
                        hashed_password=get_password_hash("admin123")
                    )
                    session.add(admin_user)
                    
                    test_user = User(
                        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        email="test@example.com",
                        hashed_password=get_password_hash("test123")
                    )
                    session.add(test_user)
                    
                    print("üë• Created sample users")
                
                await session.commit()
                print("‚úÖ Sample data added successfully")
                
            except Exception as e:
                await session.rollback()
                print(f"‚ùå Error adding sample data: {e}")
                raise
        
        print("\nüéâ Database initialized successfully!")
        print("\nüìã Sample accounts:")
        print("  üë§ Admin: admin@coursestore.ru / admin123")
        print("  üë§ Test User: test@example.com / test123")
        print(f"\nüìö Courses available: 8")
        print("\nüöÄ You can now start the application!")
        
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        raise
    finally:
        await engine.dispose()

async def reset_database():
    """Reset database by dropping and recreating all tables"""
    print("üîÑ Resetting database...")
    
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
            print("üóëÔ∏è Dropped all tables")
            
            await conn.run_sync(Base.metadata.create_all)
            print("üî® Created all tables")
        
        print("‚úÖ Database reset completed")
        
    except Exception as e:
        print(f"‚ùå Database reset failed: {e}")
        raise
    finally:
        await engine.dispose()

async def check_database():
    """Check database connection and show info"""
    print("üîç Checking database connection...")
    
    try:
        async with AsyncSessionLocal() as session:
            from sqlalchemy import text, select
            
            # Test connection
            result = await session.execute(text("SELECT 1"))
            if result.scalar() == 1:
                print("‚úÖ Database connection successful")
            
            # Count records
            courses_count = await session.execute(select(Course))
            courses = len(courses_count.scalars().all())
            
            users_count = await session.execute(select(User))
            users = len(users_count.scalars().all())
            
            print(f"üìä Database statistics:")
            print(f"  üìö Courses: {courses}")
            print(f"  üë• Users: {users}")
            
    except Exception as e:
        print(f"‚ùå Database check failed: {e}")
        raise
    finally:
        await engine.dispose()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == "reset":
            asyncio.run(reset_database())
        elif command == "check":
            asyncio.run(check_database())
        else:
            print("Available commands: reset, check")
            print("Usage: python init_db.py [command]")
    else:
        asyncio.run(init_database())