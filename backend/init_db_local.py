# backend/init_db_local.py - Initialize SQLite database with sample data
import asyncio
from app.database_sqlite import create_all_tables, AsyncSessionLocal
from app.models import Course, User
from app.auth import get_password_hash
import os
from dotenv import load_dotenv

# Load local environment
load_dotenv('.env.local')

async def init_database():
    """Initialize database with tables and sample data"""
    print("üîÑ Initializing SQLite database...")
    
    try:
        # Create all tables
        await create_all_tables()
        print("‚úÖ Database tables created successfully")
        
        # Add sample data
        async with AsyncSessionLocal() as session:
            try:
                # Check if courses already exist
                from sqlalchemy import select
                existing_courses = await session.execute(select(Course))
                if existing_courses.scalars().first():
                    print("üìö Courses already exist, skipping course creation")
                else:
                    # Add sample courses
                    courses = [
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                            description="–ù–∞—É—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã —Å –Ω—É–ª—è! –ò–∑—É—á–∏—Ç–µ HTML, CSS, JavaScript –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏. –ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã.",
                            price=5000.0,
                            instructor="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                            duration="8 –Ω–µ–¥–µ–ª—å",
                            level="–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                            image_url="/images/web-dev.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –¥–∏–∑–∞–π–Ω—É",
                            description="–û—Å–≤–æ–π—Ç–µ –æ—Å–Ω–æ–≤—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ UX/UI. –ù–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Figma, Adobe Creative Suite –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.",
                            price=4500.0,
                            instructor="–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                            duration="6 –Ω–µ–¥–µ–ª—å",
                            level="–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                            image_url="/images/design.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python",
                            description="–°—Ç–∞–Ω—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ Python! –û—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫. –ò–∑—É—á–∏—Ç–µ Django, Flask, —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ API.",
                            price=6000.0,
                            instructor="–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤",
                            duration="12 –Ω–µ–¥–µ–ª—å",
                            level="–°—Ä–µ–¥–Ω–∏–π",
                            image_url="/images/python.jpg"
                        ),
                        Course(
                            title="–ö—É—Ä—Å –ø–æ Data Science",
                            description="–ò–∑—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –û—Å–≤–æ–π—Ç–µ Python, SQL, pandas, scikit-learn –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.",
                            price=8000.0,
                            instructor="–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
                            duration="16 –Ω–µ–¥–µ–ª—å",
                            level="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                            image_url="/images/data-science.jpg"
                        )
                    ]
                    
                    for course in courses:
                        session.add(course)
                    
                    print(f"üìö Created {len(courses)} sample courses")
                
                # Check if users already exist
                existing_users = await session.execute(select(User))
                if existing_users.scalars().first():
                    print("üë• Users already exist, skipping user creation")
                else:
                    # Add sample users
                    admin_user = User(
                        name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                        email="admin@coursestore.ru",
                        hashed_password=get_password_hash("admin123")
                    )
                    session.add(admin_user)
                    
                    test_user = User(
                        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        email="test@example.com",
                        hashed_password=get_password_hash("test123")
                    )
                    session.add(test_user)
                    
                    print("üë• Created sample users")
                
                await session.commit()
                print("‚úÖ Sample data added successfully")
                
            except Exception as e:
                await session.rollback()
                print(f"‚ùå Error adding sample data: {e}")
                raise
        
        print("\nüéâ SQLite database initialized successfully!")
        print("\nüìã Sample accounts:")
        print("  üë§ Admin: admin@coursestore.ru / admin123")
        print("  üë§ Test User: test@example.com / test123")
        print(f"\nüìö Courses available: 4")
        print("\nüöÄ You can now start the application!")
        
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(init_database())
