# fix-db-simple.py - Simple database fix without complex imports
import sqlite3
import hashlib
import os

# Change to backend directory
os.chdir('backend')

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def setup_database():
    print("üîß Setting up SQLite database directly...")
    
    # Create SQLite database
    conn = sqlite3.connect('course_store.db')
    cursor = conn.cursor()
    
    # Create users table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            hashed_password TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Create courses table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS courses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            price REAL NOT NULL,
            instructor TEXT,
            duration TEXT,
            level TEXT,
            image_url TEXT,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Create orders table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            total_amount REAL NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # Create cart_items table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cart_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            course_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (course_id) REFERENCES courses (id)
        )
    ''')
    
    # Create order_items table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            course_id INTEGER,
            price REAL NOT NULL,
            FOREIGN KEY (order_id) REFERENCES orders (id),
            FOREIGN KEY (course_id) REFERENCES courses (id)
        )
    ''')
    
    # Check if data already exists
    cursor.execute("SELECT COUNT(*) FROM courses")
    course_count = cursor.fetchone()[0]
    
    if course_count == 0:
        print("üìö Adding sample courses...")
        courses = [
            ("–ö—É—Ä—Å –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ù–∞—É—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã —Å –Ω—É–ª—è! –ò–∑—É—á–∏—Ç–µ HTML, CSS, JavaScript –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏.", 5000.0, "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "8 –Ω–µ–¥–µ–ª—å", "–ù–∞—á–∏–Ω–∞—é—â–∏–π", "/images/web-dev.jpg"),
            ("–ö—É—Ä—Å –ø–æ –¥–∏–∑–∞–π–Ω—É", "–û—Å–≤–æ–π—Ç–µ –æ—Å–Ω–æ–≤—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ UX/UI. –ù–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Figma, Adobe Creative Suite.", 4500.0, "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "6 –Ω–µ–¥–µ–ª—å", "–ù–∞—á–∏–Ω–∞—é—â–∏–π", "/images/design.jpg"),
            ("–ö—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python", "–°—Ç–∞–Ω—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ Python! –û—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫.", 6000.0, "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤", "12 –Ω–µ–¥–µ–ª—å", "–°—Ä–µ–¥–Ω–∏–π", "/images/python.jpg"),
            ("–ö—É—Ä—Å –ø–æ Data Science", "–ò–∑—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.", 8000.0, "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞", "16 –Ω–µ–¥–µ–ª—å", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "/images/data-science.jpg"),
            ("–ö—É—Ä—Å –ø–æ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iOS –∏ Android —Å React Native.", 7000.0, "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤", "10 –Ω–µ–¥–µ–ª—å", "–°—Ä–µ–¥–Ω–∏–π", "/images/mobile.jpg")
        ]
        
        cursor.executemany('''
            INSERT INTO courses (title, description, price, instructor, duration, level, image_url)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', courses)
        print(f"‚úÖ Added {len(courses)} courses")
    else:
        print(f"üìö Courses already exist ({course_count} found)")
    
    # Check if users already exist
    cursor.execute("SELECT COUNT(*) FROM users")
    user_count = cursor.fetchone()[0]
    
    if user_count == 0:
        print("üë• Adding sample users...")
        users = [
            ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin@coursestore.ru", hash_password("admin123")),
            ("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "test@example.com", hash_password("test123"))
        ]
        
        cursor.executemany('''
            INSERT INTO users (name, email, hashed_password)
            VALUES (?, ?, ?)
        ''', users)
        print(f"‚úÖ Added {len(users)} users")
    else:
        print(f"üë• Users already exist ({user_count} found)")
    
    # Commit changes and close
    conn.commit()
    conn.close()
    
    print("\nüéâ Database setup completed!")
    print("\nüìã Test Accounts:")
    print("  üë§ Admin: admin@coursestore.ru / admin123")
    print("  üë§ User: test@example.com / test123")
    print("\nüöÄ Ready to start the application!")

if __name__ == "__main__":
    setup_database()